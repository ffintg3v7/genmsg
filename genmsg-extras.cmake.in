find_program(GENMSG_BIN genmsg_cpp.py
  PATHS @PKG_BIN_DIRS@)

message(STATUS "GENMSG_BIN found at ${GENMSG_BIN}")


#macro(_find_msg_Iflags PKG ARGS)
#  parse_arguments(ARG "MESSAGES;DEPENDENCIES;LANGS" "" ${ARGN})


macro(generate_msgs PKG)
#  _file_msg_Iflags ${PKG} ${ARGS}.
  parse_arguments(ARG "MESSAGES;DEPENDENCIES;LANGS" "" ${ARGN})

  install(FILES
    ${ARG_MESSAGES}
    DESTINATION share/msg/${PKG})

  foreach(msg ${ARG_MESSAGES})
    # common stuff
    get_filename_component(MSG_SHORT_NAME ${msg} NAME_WE)
    set(MSG_INPUT_FILE ${CMAKE_CURRENT_SOURCE_DIR}/${msg})
    message(STATUS "InputFile=${MSG_INPUT_FILE}")

    # Common, build deps
    set(IFLAGS "")
    set(DEP_TARGETS "")

    foreach(dep ${ARG_DEPENDENCIES})
      if(${dep}_FOUND)
        foreach(i ${${dep}_MSG_INCLUDE_DIRS})
          set(IFLAGS -I${dep}:${i} ${IFLAGS})
        endforeach()
      else()
        message(WARNING "Please add find_package() for ${dep}")
      endif()
    endforeach()

    message(STATUS "I flags ${IFLAGS}")

    execute_process(COMMAND
      ${GENCPP_BIN} ${MSG_INPUT_FILE} -d ${IFLAGS}
      OUTPUT_VARIABLE MSG_DEPS
      OUTPUT_STRIP_TRAILING_WHITESPACE
      )
    separate_arguments(MSG_DEPS UNIX_COMMAND ${MSG_DEPS})
    message(STATUS "MSG_DEPS: ${MSG_DEPS}")
  endforeach()

  # generate msgs files for the specified languages
  foreach(lang ${ARG_LANGS})
    if(NOT gen${lang}_FOUND)
      message(STATUS "Searching for package gen${lang}")
      find_package(gen${lang})
    endif()

    if(gen${lang}_FOUND)
      set(GEN_OUTPUT_DIR ${CMAKE_BINARY_DIR}/gen_msgs/${lang}/${PKG})

	_generate_msgs_cpp( ${PKG}
	"${IFLAGS}"
	"${MSG_DEPS}"
	${ARG_MESSAGES}
	"${GEN_OUTPUT_DIR}")

#      execute_code_string(
#	"_generate_msgs_${lang}( ${PKG}
#	\"${IFLAGS}\"
#	\"\"
#	${ARG_MESSAGES}
#	\"${GEN_OUTPUT_DIR}\")")

      #Make list of targets _genXXX targets this package depends on
      set(DEP_TARGETS "")
      foreach(dep ${ARG_DEPENDENCIES})
	list(APPEND DEP_TARGETS ${dep}_gen${lang})
      endforeach()

      install(
	FILES
	${ALL_GEN_OUTPUT_FILES_${lang}}
	DESTINATION msg/${lang}/${PKG})

      add_custom_target(${PKG}_gencpp ALL
	DEPENDS ${ALL_GEN_OUTPUT_FILES_${lang}}
	)

      message(STATUS "DEP_TARGETS: ${DEP_TARGETS}")
      if(DEP_TARGETS)
	add_dependencies(${PKG}_gencpp ${DEP_TARGETS})
      endif(DEP_TARGETS)

    else()
      message(SEND_ERROR "Generator package 'gen${lang}' for language '${lang} not found")
    endif()
  endforeach() #lang

endmacro()
